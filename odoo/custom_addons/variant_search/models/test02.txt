# -*- coding: utf-8 -*-

from odoo import api, fields, models, tools
from odoo.addons import product
from odoo import http
from odoo.http import route, request
import json
import re
import logging
_logger = logging.getLogger(__name__)

class ProductTemplateAttributeValue(models.Model):
	"""
	This is a bugfix to Odoo 10.0
	Categories should not be ordered alphabetically.
	Categories should be ordered according to their choosen order (i.e. sequence field).
	"""
	_inherit = 'product.template.attribute.value'

	def _variant_name(self, variable_attributes):
		return ", ".join([v.name for v in self.sorted(key=lambda r: r.attribute_id.sequence) if v.attribute_id in variable_attributes])


class NameProductController(http.Controller):
	@http.route('/product_name_data', type='http', website=True, auth='public', 
	methods=['GET'], csrf=False)
	def get_product_names(self):
		Product = request.env['product.product'].sudo()
		
		# Sử dụng SQL để lấy tên sản phẩm duy nhất
		query = """
			SELECT DISTINCT TRIM(SUBSTRING(var_desc FROM '^(.*?)\s*\(')) AS product_name
			FROM product_product
			WHERE var_desc IS NOT NULL AND var_desc != ''
			ORDER BY product_name
		"""
		request.env.cr.execute(query)
		product_names = [row[0] for row in request.env.cr.fetchall()]
		
		# Trả về dữ liệu dưới dạng JSON
		return request.make_response(json.dumps(product_names), headers=[('Content-Type', 'application/json')])
	
class ProductProductExt(models.Model):
	"""
	When the variants are saved, we store the whole description in "var_desc" field.
	When searching for products, e.g. in invoice line, we perform search in that field.
	Moreover, during this search we convert ' '  to '%' (this could be useful in standard search, too).
	WARNING: we lose the "customer" description.
	"""
	_inherit = 'product.product'
	var_desc = fields.Char(comment='Variant description', compute='_compute_var_desc', store=True)
	#var_desc = fields.Char(comment='Variant description', store=True)

	@tools.ormcache()
	def _get_product_names(self):
		self.env.cr.execute("""
			SELECT DISTINCT TRIM(SUBSTRING(var_desc FROM '^(.*?)\s*\(')) AS product_name
			FROM product_product
			WHERE var_desc IS NOT NULL AND var_desc != ''
			ORDER BY product_name
		""")
		return [row[0].lower().strip() for row in self.env.cr.fetchall()]

	def name_get(self):
		def _name_get(d):
			name = d.get('name', '')
			code = self._context.get('display_default_code', True) and d.get('default_code', False) or False
			if code:
				name = '[%s] %s' % (code,name)
			return (d['id'], name)

		partner_id = self._context.get('partner_id')
		if partner_id:
			partner_ids = [partner_id, self.env['res.partner'].browse(partner_id).commercial_partner_id.id]
		else:
			partner_ids = []

		# all user don't have access to seller and partner
		# check access and use superuser
		self.check_access_rights("read")
		self.check_access_rule("read")

		result = []
		for product in self.sudo():
			# display all the attributes 
			variable_attributes = product.attribute_line_ids.mapped('attribute_id')
			variant = product.product_template_attribute_value_ids._variant_name(variable_attributes)

			name = variant and "%s (%s)" % (product.name, variant) or product.name
			sellers = []
			if partner_ids:
				sellers = [x for x in product.seller_ids if (x.partner_id.id in partner_ids) and (x.product_id == product)]
				if not sellers:
					sellers = [x for x in product.seller_ids if (x.partner_id.id in partner_ids) and not x.product_id]
			if sellers:
				for s in sellers:
					seller_variant = s.product_name and (
						variant and "%s (%s)" % (s.product_name, variant) or s.product_name
						) or False
					mydict = {
							  'id': product.id,
							  'name': seller_variant or name,
							  'default_code': s.product_code or product.default_code,
							  }
					temp = _name_get(mydict)
					if temp not in result:
						result.append(temp)
			else:
				mydict = {
						  'id': product.id,
						  'name': name,
						  'default_code': product.default_code,
						  }
				result.append(_name_get(mydict))
		return result

					
	@api.model
	def name_search(self, name='', args=None, operator='ilike', limit=100):
		if args is None:
			args = []
		if not name:
			return super(ProductProductExt, self).name_search(name=name, args=args, operator=operator)

		products = None
		if name:

			pieces = name.lower().split()
			
			# Lấy danh sách tên sản phẩm
			product_names = self.env['product.product'].sudo().search_read(
				[('var_desc', '!=', ''), ('var_desc', '!=', False)],
				['var_desc']
			)
			product_names = [re.split(r'\s*\(', p['var_desc'])[0].lower().strip() for p in product_names]
			
			if operator in ['like', 'ilike']:
				domain = ['|', ('name', operator, name)] + [('var_desc', operator, piece) for piece in pieces]
				products = self.search(domain + args)

				if products:
					def sort_key(product):
						desc = product.var_desc.lower()
						product_name = re.split(r'\s*\(', desc)[0].lower().strip()
						variant_match = re.search(r'\((.*?)\)', desc)
						
						# Tìm tên sản phẩm phù hợp nhất
						matching_name = max(product_names, key=lambda x: len(set(x.split()) & set(pieces)))
						name_words = matching_name.split()
						
						name_score = 0
						attr_score = 0
						
						if variant_match:
							variant_values = [v.strip().lower() for v in variant_match.group(1).split(',')]
							
							# Tính điểm cho tên sản phẩm
							for i, piece in enumerate(pieces):
								if i < len(name_words) and piece in product_name:
									name_score += 1
								elif i >= len(name_words):
									# Tính điểm cho thuộc tính
									for j, attr in enumerate(variant_values):
										if piece == attr:
											attr_score += 2  # Điểm cao hơn cho thuộc tính khớp chính xác
											break
										elif piece in attr:
											attr_score += 1  # Điểm thấp hơn cho thuộc tính khớp một phần
											break
						
						return (name_score, attr_score)

					sorted_products = products.sorted(key=sort_key, reverse=True)
					max_score = sort_key(sorted_products[0])
					filtered_products = sorted_products.filtered(lambda p: sort_key(p) == max_score)
					return filtered_products[:limit].name_get()

		return super(ProductProductExt, self).name_search(name=name, args=args, operator=operator)
	
	@api.depends('product_template_attribute_value_ids', 'name')
	def _compute_var_desc(self):
		for rec in self:
			attributes = rec.product_template_attribute_value_ids._variant_name(rec.attribute_line_ids.mapped('attribute_id'))
			rec.var_desc = f"{rec.name} ({attributes})" if attributes else rec.name
